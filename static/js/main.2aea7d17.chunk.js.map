{"version":3,"sources":["components/Square.js","components/Board.js","helpers.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","color","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","calculateWinner","lines","length","a","b","c","console","log","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","flexDirection","alignItems","textAlign","boardCopy","styles","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2aea7d17.chunk.js","sourcesContent":["import React from 'react';\n\nconst style={\n    background:'#34666F',\n    border:'2px solid #FFB530',\n    fontSize:'30px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none',\n    color:'#FFB530'\n};\n\nconst Square =({value, onClick})=>(\n        <button style={style} onClick={onClick}>\n            {value}\n        </button>\n            \n    )\n\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nconst style={\n    border: '4px solid #FFB530',\n    borderRadius: '10px',\n    width: '50vh',\n    height: '50vh',\n    margin: '0 auto',\n    display: 'grid',\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'}\n\nconst Board =({squares, onClick})=>(\n        <div style={style}>\n            {squares.map((square,i)=>(\n                <Square key={i} value={square} onClick={()=> onClick(i)} />\n            )\n            )}\n        </div>\n)\n\nexport default Board","export function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  \n  const squares = [\n    null, null, null,\n    'X', 'X', 'O',\n    null, null, null\n  ];\n  \n  console.log(calculateWinner(squares));","import React, {useState} from 'react';\nimport Board from './Board';\nimport {calculateWinner} from '../helpers'\n\nconst Game =()=>{\n    const [board, setBoard]=useState(Array(9).fill(null));\n    const [xIsNext, setXisNext]=useState(true);\n    const winner = calculateWinner(board);\n\n    const styles = {\n        width: '200px',\n        margin: '20px auto',\n    };\n    \n    const handleClick=i=>{\n        const boardCopy=[...board];\n        if(winner || boardCopy[i]) return;\n        boardCopy[i]=xIsNext?'X':'O';\n        setBoard(boardCopy);\n        setXisNext(!xIsNext);\n    }\n    \n    const renderMoves = () =>\n        (<button onClick={()=> setBoard(Array(9).fill(null))}>\n        Start!!!\n    </button>)\n    \n    return(\n        <div style={{display:'flex',flexDirection:'column', alignItems:'center'}}>\n            <h1 style={{fontSize:'50px', textAlign:'center'}}> xo-tic-tac-toe-xo</h1>\n            <Board squares={board} onClick={handleClick} />\n            <div styles={styles}>\n                <h1>{winner?'We have a Winner '+winner:'Next Move '+ (xIsNext ? 'X' : 'O')}</h1>\n                {renderMoves()}\n            </div>\n            <h2>Made with ❤️ by r-ush</h2>\n            <a style={{color:'#FFB530',fontSize:'20px'}} href='https://github.com/r-ush/xo-tic-tac-toe-xo'>github link</a>\n        </div>\n    )\n}\n\nexport default Game","import React from 'react';\nimport Game from './components/Game';\n\nimport './App.css';\n\nfunction App() {\n  return (\n      <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}